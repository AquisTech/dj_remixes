=DJ Remixes

A boat load of incredibly useful 'plugins' for Delayed::Job! DJ is a wonderful project and is incredibly useful, however it can be even more useful with just a few extras added in.

==The Extras

* A proper 'Worker' class: DJ::Worker that accepts attributes.
* Callbacks
* Hoptoad support, if using Hoptoad.
* Priority settings
* Automatic re-enqueueing
* Better scheduling
* Unique jobs.
* more ...

These are a few of the extras for DJ that are included here.

==Installation

In your <code>Gemfile</code> add the following:

  gem "delayed_job", "2.1.4"
  gem "dj_remixes"

Then install the gems:

  $ bundle install

Create a migration to add the required dj_remixes fields to the delayed_job table:

  class AddDjRemixesColumns < ActiveRecord::Migration
    def self.up
      add_column :delayed_jobs, :worker_class_name,   :string
      add_column :delayed_jobs, :started_at,          :datetime
      add_column :delayed_jobs, :finished_at,         :datetime
    end

    def self.down
      remove_column :delayed_jobs, :worker_class_name
      remove_column :delayed_jobs, :started_at
      remove_column :delayed_jobs, :finished_at
    end
  end


==Using

===Basic Worker

  class FooWorker < DJ::Worker
  
    def perform
      # do work
    end
  
  end
  
  FooWorker.enqueue

===Unique Worker

Tell DJ to only allow one of this worker at a given time.

  # We only want to charge the card once!
  class PurchaseWorker < DJ::Worker
    is_unique
  
    def perform
      # charge the credit card...
    end
  end

If the worker has an <code>id</code> attribute that then will be used in conjunction with the class name of the worker to form the unique key.

===Priority

Tell DJ to run this worker with a higher priority than others.

  class FooWorker < DJ::Worker
    priority :high
  
    def perform
      # do work
    end
  
  end
  
  FooWorker.enqueue

===Re-Enqueueing

Tell DJ to re-enqueue this worker after it has successfully completely. *NOTE*: This will actually create a new DJ object in the database, not reuse the same one.

  # Run every 30 days and charge a credit card.
  class SubscriptionWorker < DJ::Worker
    re_enqueue

    def run_at
      30.days.from_now
    end

    def perform
      # charge the credit card...
    end
  end

===Attributes

The <code>DJ::Worker</code> class can accept attributes, similar to the way an <code>ActiveRecord</code> model can.

  class FooWorker < DJ::Worker
    priority :high
  
    def perform
      # do work
      puts self.id # => 1
      puts self.person # => 'Mark Bates'
    end
  
  end
  
  worker = FooWorker.new(:id => 1, :person => 'Mark Bates')
  worker.enqueue!

==Contributors

* Mark Bates
* Stuart Garner
* Brent Kirby
* Luke Pearce
* Lars Pindrake 